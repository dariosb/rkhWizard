/**

\page bsp_c "bsp.c"

\code
/*
 *	file: bsp.c
 *	Last updated for version: 2.0
 *	Date of the last update:  Feb 28, 2012
 *
 * 	Copyright (C) 2010 Leandro Francucci. All rights reserved.
 *
 * 	RKH is free software: you can redistribute it and/or modify
 * 	it under the terms of the GNU General Public License as published by
 * 	the Free Software Foundation, either version 3 of the License, or
 * 	(at your option) any later version.
 *
 *  RKH is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with RKH, see copying.txt file.
 *
 * Contact information:
 * RKH web site:	http://
 * e-mail:			francuccilea@gmail.com
 */


#include "bsp.h"
#include "my.h"
#include "rkhdata.h"
#include "rkh.h"
#include "trazer.h"

#include <conio.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>


#define BIN_TRACE					1
#define ESC							0x1B
#define kbmap( c )					( c - '0' )


RKH_THIS_MODULE

static char fmt[ 64 ];
FILE *fdbg;
#if BIN_TRACE == 1
static FILE *ftbin;
#endif
static DWORD tick_msec;			/* clock tick in msec */
rkhui8_t running;
MYEVT_T *mye;
static RKH_DCLR_STATIC_EVENT( eterm, TERM );

static 
DWORD WINAPI 
isr_tmr_thread( LPVOID par )	/* Win32 thread to emulate timer ISR */
{
    ( void )par;
    while( running ) 
	{
		rkh_tim_tick();
        Sleep( tick_msec );
    }
    return 0;
}


static 
DWORD WINAPI 
isr_kbd_thread( LPVOID par )			/* Win32 thread to emulate keyboard ISR */
{
	int c;
	MYEVT_T *mye;

    ( void )par;
    while( running ) 
	{
		c = _getch();
		
		if( c == ESC )
			rkh_sma_post_fifo( my, &eterm );
		else
		{
			mye = RKH_ALLOC_EVENT( MYEVT_T, kbmap( c ) );
			mye->ts = ( rkhui16_t )rand();
			rkh_sma_post_fifo( my, ( RKHEVT_T* )mye );
		}
    }
    return 0;
}


void 
rkh_hk_start( void ) 
{
    DWORD thtmr_id, thkbd_id;
    HANDLE hth_tmr, hth_kbd;

	/* set the desired tick rate */
    tick_msec = 1000UL/BSP_TICKS_PER_SEC;
    running = (rkhui8_t)1;
	
	/* create the ISR timer thread */
    hth_tmr = CreateThread( NULL, 1024, &isr_tmr_thread, 0, 0, &thtmr_id );
    RKHASSERT( hth_tmr != (HANDLE)0 );
    SetThreadPriority( hth_tmr, THREAD_PRIORITY_TIME_CRITICAL );

	/* create the ISR keyboard thread */
    hth_kbd = CreateThread( NULL, 1024, &isr_kbd_thread, 0, 0, &thkbd_id );
    RKHASSERT( hth_kbd != (HANDLE)0 );
    SetThreadPriority( hth_kbd, THREAD_PRIORITY_NORMAL );
}


void 
rkh_hk_exit( void ) 
{
	rkh_trc_flush();
    running = 0;
}


void 
rkh_hk_idle( void )				/* called within critical section */
{
    RKH_EXIT_CRITICAL( dummy );
	rkh_trc_flush();
    RKH_WAIT_FOR_EVENTS();		/* yield the CPU until new event(s) arrive */
}


void 
rkh_assert( RKHROM char * const file, int line )
{
	fprintf( stderr,	"RKHASSERT: [%d] line from %s "
						"file\n", line, file );
	__debugbreak();
	rkh_exit();
}


static
void
print_banner( void )
{
	printf(	"Abstract Hierarchical State Machine (AHSM) example\n\n" );
	printf(	"RKH version      = %s\n", RKH_RELEASE );
	printf(	"Port version     = %s\n", rkh_get_port_version() );
	printf(	"Port description = %s\n\n", rkh_get_port_desc() );
	printf(	"Description: \n\n"
			"The goal of this demo application is to explain how to \n"
			"represent a state machine using the RKH framework. To do \n"
			"that is proposed a simple and abstract example, which is \n"
			"shown in the documentation file Figure 1 section \n"
			"\"Representing a State Machine\". \n\n\n" );

	printf( "1.- Press <numbers> to send events to state machine. \n" );
	printf( "2.- Press ESC to quit \n\n\n" );
}


void 
rkh_trc_open( void )
{
	rkh_trc_init();
	rkh_trc_control( RKH_TRC_START );

	if( ( fdbg = fopen( "../ahlog.txt", "w+" ) ) == NULL )
	{
		perror( "Can't open file\n" );
		exit( EXIT_FAILURE );
	}

#if BIN_TRACE == 1
	if( ( ftbin = fopen( "../ftbin", "w+b" ) ) == NULL )
	{
		perror( "Can't open file\n" );
		exit( EXIT_FAILURE );
	}
#endif
	trazer_init();
}


void 
rkh_trc_close( void )
{
	fclose( fdbg );
#if BIN_TRACE == 1
	fclose( ftbin );
#endif
}


#if BIN_TRACE == 1
	#define ftbin_flush( d )				\
				fwrite ( d, 1, 1, ftbin );	\
				fflush( ftbin )
#else
	#define ftbin_flush()
#endif


RKHTS_T 
rkh_trc_getts( void )
{
	return ( RKHTS_T )clock();
}


void 
rkh_trc_flush( void )
{
	rkhui8_t *d;

	while( ( d = rkh_trc_get() ) != ( rkhui8_t* )0 )
	{
		ftbin_flush( d );
		trazer_parse( *d );
	}
}


void 
bsp_init( int argc, char *argv[] )
{
	(void)argc;
	(void)argv;

	srand( ( unsigned )time( NULL ) );
	print_banner();
}
\endcode
*/
