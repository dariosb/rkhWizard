<headerconfig>
   <group name='Framework' 
      docs='Configuration options related to framework'>
      <option type='int' id='RKH_MAX_SMA'
         docs='Specify the maximum number of state machine applications (SMA) to be used 
         by the application (can be a number in the range [1..64]).'
         minval='1' maxval='64' defval='8'/>
      <option type='int' id='TRKH_MAX_SMA'
         docs='TEST'
         minval='0' maxval='64' defval='8'/>
      <option type='bool' id='RKH_EN_DYNAMIC_EVENT' 
         docs='If the dynamic event support (see #RKH_EN_DYNAMIC_EVENT) is set to 1, RKH allows to use event with parameters, defer/recall, allocating and recycling dynamic events, among other features.'
         defval='1' depends='TRKH_MAX_SMA>3'/>
      <option type='int' id='RKH_MAX_EPOOL' 
         docs='If the dynamic event support is enabled (see #RKH_EN_DYNAMIC_EVENT) then 
         the #RKH_MAX_EPOOL can be used to specify the maximum number of fixed-size
         memory block pools to be used by the application (can be a number in the range [0..256]).
         Note that a value of 0 will completely suppress the memory pool services.'
         minval='0' maxval='256' defval='4' />
      <option type='enum' id='RKH_SIZEOF_EVENT' 
         docs='Specify the size of the event signal. The valid values [in bits] are 8, 16 or 32. Default is 8.
         The higher the signal size, the higher the event structure size and therefore more memory consumption.
         See #RKHE_T data type.'
         defval='8' >
         <value name="8"/>
         <value name="16"/>
         <value name="32"/>
      </option>
      <option type='enum' id='RKH_SIZEOF_ESIZE' 
         docs='Specify the data type of event size. The valid values [in bits] are 8, 16 or 32. Default is 8.
         See #RKHES_T, rkh_epool_register(), and RKH_ALLOC_EVENT().'
         defval='8' >
         <value name="8"/>
         <value name="16"/>
         <value name="32"/>
      </option>
      <option type='bool' id='RKH_EN_DEFERRED_EVENT' 
         docs='If the #RKH_EN_DEFERRED_EVENT is set to 1 and the dynamic event support is enabled 
         (see #RKH_EN_DYNAMIC_EVENT), RKH enables the defer and recall event features.'
         defval='1' />
      <option type='bool' id='RKH_ASSERT_EN' 
         docs='If the #RKH_ASSERT_EN is set to 0 the checking assertions are disabled. In particular macros
         RKHASSERT(), RKHREQUIRE(), RKHENSURE(), RKHINVARIANT(), and RKHERROR() do NOT evaluate
         the test condition passed as the argument to these macros. One notable exception is the macro RKHALLEGE(),
         that still evaluates the test condition, but does not report assertion failures when the #RKH_ASSERT_EN is enabled.' 
         defval='1' />
      <option type='bool' id='RKH_HK_EN_DISPATCH'  
         docs='If the #RKH_HK_EN_SIGNAL is set to 1, RKH will invoke the signal  hook function rkh_hk_signal() when the producer
         of an event directly posts the event to the event queue of the consumer SMA. When this is set the application
         must provide the hook function. ' 
         defval='0' />
      <option type='bool' id='RKH_HK_EN_SIGNAL'  
         docs='If the #RKH_HK_EN_SIGNAL is set to 1, RKH will invoke the signal  hook function rkh_hk_signal() when the producer 
         of an event directly  posts the event to the event queue of the consumer SMA. When this is set the application
         must provide the hook function.' 
         defval='0' />
      <option type='bool' id='RKH_HK_EN_TIMEOUT' 
         docs='If the #RKH_HK_EN_TIMEOUT is set to 1, RKH will invoke the timeout  hook function rkh_hk_timeout() when a timer
         expires just before the assigned event is directly posted into the state machine application queue. 
         When this is set the application must provide the hook function. '  
         defval='0' />
      <option type='bool' id='RKH_HK_EN_START' 
         docs='If the #RKH_HK_EN_START is set to 1, RKH will invoke the start  hook function rkh_hk_start() 
         just before the RKH takes over control of  the application. When this is set the application
         must provide the hook function. '  
         defval='1' />
      <option type='bool' id='RKH_HK_EN_EXIT'  
         docs='If the #RKH_HK_EN_EXIT is set to 1, RKH will invoke the exit 
         hook function just before it returns to the underlying OS/RTOS. Usually, 
         the rkh_hk_exit() is useful when executing clean-up code upon SMA 
         terminate or framework exit.
         When this is set the application must provide the hook function. ' 
         defval='1' />
      <option type='bool' id='RKH_SMA_EN_IEVENT' 
         docs='If the #RKH_SMA_EN_IEVENT is set to 1 then an initial event could be 
         be passed to state machine application when it starts, like an argc/argv. 
         Also, the #RKH_SMA_EN_IEVENT changes the initial action prototype.'
         defval='0' /> 
      <option type='bool' id='RKH_EN_SMA_THREAD' 
         docs='If the #RKH_EN_SMA_THREAD is set to 1, each SMA (active object) has its own 
         thread of execution.'  
         defval='1' />
      <option type='bool' id='RKH_EN_SMA_THREAD_DATA' 
         docs='If the #RKH_EN_SMA_THREAD and #RKH_EN_SMA_THREAD_DATA are set to 1, each 
         SMA (active object) has its own thread of execution and its own object data.'  
         defval='1' />
      <option type='bool' id='RKH_EN_NATIVE_SCHEDULER' 
         docs='If the #RKH_EN_NATIVE_SCHEDULER is set to 1 then RKH will include the 
         simple, cooperative, and nonpreemptive scheduler RKHS.
         When #RKH_EN_NATIVE_SCHEDULER is enabled RKH also will automatically 
         define #RKH_EQ_TYPE, RKH_SMA_BLOCK(), RKH_SMA_READY(), RKH_SMA_UNREADY(), 
         and assume the native priority scheme.'  
         defval='0' />
      <option type='bool' id='RKH_EN_NATIVE_EQUEUE' 
         docs='If the #RKH_EN_NATIVE_EQUEUE is set to 1 and the native event queue is 
         enabled (see #RKH_RQ_EN) then RKH will include its own implementation of 
         rkh_sma_post_fifo(), rkh_sma_post_lifo(), and rkh_sma_get() functions.'  
         defval='1' />
      <option type='bool' id='RKH_EN_NATIVE_DYN_EVENT' 
         docs='If the #RKH_EN_NATIVE_DYN_EVENT is set to 1 and the native fixed-size 
         memory block facility is enabled (see #RKH_MP_EN) then RKH will include 
         its own implementation of dynamic memory management.
         When #RKH_EN_NATIVE_DYN_EVENT is enabled RKH also will automatically 
         define RKH_DYNE_TYPE, RKH_DYNE_INIT(), RKH_DYNE_GET_ESIZE(), 
         RKH_DYNE_GET(), and RKH_DYNE_PUT().'  
         defval='1' />
      <option type='bool' id='RKH_EN_REENTRANT' 
         docs='If the #RKH_EN_REENTRANT is set to 1, the RKH event dispatch allows to be 
         invoked from several threads of executions. Enable this only if the 
         application is based on a multi-thread architecture.'  
         defval='0' />
   </group>
   <group name="Machine Application" 
      docs="Configuration options related to state machine applications">
      <option type='bool' id='RKH_SMA_EN_ID' 
         docs='If the #RKH_SMA_EN_ID is set to 1 then RKH allows to add a numerical 
         value to every state machine. This number allows to uniquely identify a 
         state machine application. '  
         defval='0' />
      <option type='bool' id='RKH_SMA_EN_GET_INFO'  
         docs='If the #RKH_SMA_EN_GET_INFO is set to 1 then RKH will include the 
         rkh_clear_info() and rkh_get_info() functions.' 
         defval='0' />
      <option type='bool' id='RKH_SMA_EN_STATE_ID'  
         docs='If the #RKH_SMA_EN_STATE_ID is set to 1 then RKH allows to add a numerical 
         value to every state and pseudostate. This number allows to uniquely 
         identify a state and/or pseudostate.'  
         defval='0' />
      <option type='bool' id='RKH_SMA_EN_PPRO'  
         docs='If the #RKH_SMA_EN_PPRO is set to 1 then RKH allows to reference a event 
         preprocessor to any basic state. Aditionally, by means of single 
         inheritance in C it could be used as state s abstract data. 
         Moreover, implementing the single inheritance in C is very simply by 
         literally embedding the base type, #RKHPPRO_T in this case, as the first 
         member of the derived structure. See \a prepro member of #RKHST_T 
         structure for more information.'  
         defval='0' />  
      <option type='bool' id='RKH_SMA_EN_HCAL'  
         docs='If the #RKH_SMA_EN_HCAL is set to 1, the RKH allows state nesting. 
         When #RKH_SMA_EN_HCAL is set to 0 some important features of RKH are not 
         included: state nesting, composite state, history (shallow and deep) 
         pseudostate, entry action, and exit action.'  
         defval='1' />
      <option type='int' id='RKH_SMA_MAX_HCAL_DEPTH'  
         docs='Specify the maximum number of hierarchical levels. The smaller this 
         number, the lower the RAM consumption. Typically, the most of hierarchical 
         state machines uses up to 4 levels. Currently #RKH_SMA_MAX_HCAL_DEPTH cannot 
         exceed 8.'  
         defval='4' minval='1' maxval='8' />
      <option type='int' id='RKH_SMA_MAX_TRC_SEGS'  
         docs='Specify the maximum number of linked transition segments. The smaller 
         this number, the lower the RAM consumption. Typically, the most of 
         hierarchical state machines uses up to 4 transition segments. 
         Currently #RKH_SMA_MAX_TRC_SEGS cannot exceed 8.' 
         defval='4' minval='1' maxval='8' />
      <option type='bool' id='RKH_SMA_EN_PSEUDOSTATE'  
         docs='If the #RKH_SMA_EN_PSEUDOSTATE is set to 1, the RKH allows pseudostates 
         usage.' 
         defval='1' />
      <option type='bool' id='RKH_SMA_EN_DEEP_HISTORY'  
         docs='If the #RKH_SMA_EN_DEEP_HISTORY and #RKH_SMA_EN_PSEUDOSTATE are set to 1, 
         he RKH allows deep history pseudostate usage.'  
         defval='1' />
      <option type='bool' id='RKH_SMA_EN_SHALLOW_HISTORY'  
         docs='If the #RKH_SMA_EN_SHALLOW_HISTORY and #RKH_SMA_EN_PSEUDOSTATE are set to 1, 
         the RKH allows shallow history pseudostate usage.'  
         defval='1' />
      <option type='bool' id='RKH_SMA_EN_JUNCTION'  
         docs='If the #RKH_SMA_EN_JUNCTION and #RKH_SMA_EN_PSEUDOSTATE are set to 1, the 
         RKH allows junction pseudostate usage.'  
         defval='1' />
      <option type='bool' id='RKH_SMA_EN_CONDITIONAL'  
         docs='If the #RKH_SMA_EN_CONDITIONAL and #RKH_SMA_EN_PSEUDOSTATE are set to 1, 
         the RKH allows branch (or conditional) pseudostate usage.'  
         defval='1' />
      <option type='bool' id='RKH_SMA_EN_SUBMACHINE'  
         docs='If the #RKH_SMA_EN_SUBMACHINE and #RKH_SMA_EN_PSEUDOSTATE are set to 1, 
         the RKH allows submachine state (and exit/entry points) usage.'  
         defval='0' />
   </group>
   <group name='SMA' 
      docs='Configuration options related to SMA action feactures'>
      <option type='bool' id='RKH_SMA_EN_INIT_ARG_SMA'  
         docs='If the #RKH_SMA_EN_INIT_ARG_SMA is set to 1 then the initial action prototype 
         will add as argument a pointer to state machine structure #RKHSMA_T. See 
         #RKHINIT_T definition.' 
         defval='1' />
      <option type='bool' id='RKH_SMA_EN_ENT_ARG_SMA'  
         docs='If the #RKH_SMA_EN_ENT_ARG_SMA is set to 1 then the entry action prototype 
         will add as argument a pointer to state machine structure #RKHSMA_T. See 
         #RKHENT_T definition.'
         defval='1' />
      <option type='bool' id='RKH_SMA_EN_EXT_ARG_SMA'  
         docs='If the #RKH_SMA_EN_EXT_ARG_SMA is set to 1 then the exit action prototype 
         will add as argument a pointer to state machine structure #RKHSMA_T. See 
         #RKHEXT_T definition.' 
         defval='1' />
      <option type='bool' id='RKH_SMA_EN_ACT_ARG_SMA'  
         docs='If the #RKH_SMA_EN_ACT_ARG_SMA is set to 1 then the transition action 
         prototype will add as argument a pointer to state machine structure 
         #RKHSMA_T. See #RKHACT_T definition.' 
         defval='1' />
      <option type='bool' id='RKH_SMA_EN_ACT_ARG_EVT'  
         docs='If the #RKH_SMA_EN_ACT_ARG_EVT is set to 1 then the transition action 
         prototype will add as argument a pointer to ocurred event. 
         See RKHACT_T definition.'
         defval='1' />
      <option type='bool' id='RKH_SMA_EN_GRD_ARG_EVT'  
         docs='If the #RKH_SMA_EN_GRD_ARG_EVT is set to 1 then the transition guard  
         prototype will add as argument a pointer to ocurred event. 
         See RKHGUARD_T definition' 
         defval='1' />
      <option type='bool' id='RKH_SMA_EN_GRD_ARG_SMA'  
         docs='If the #RKH_SMA_EN_GRD_ARG_SMA is set to 1 then the transition guard  
         prototype will add as argument a pointer to state machine structure 
         RKHSMA_T. See RKHGUARD_T definition.' 
         defval='1' />
      <option type='bool' id='RKH_SMA_EN_PPRO_ARG_SMA'  
         docs='If the #RKH_SMA_EN_PPRO_ARG_SMA is set to 1 then the event preprocessor  
         (Moore function like entry and exit actions) prototype will add as 
         argument a pointer to state machine structure RKHSMA_T. See RKHPPRO_T definition.' 
         defval='1' />
   </group>
   <group name="Trace" 
      docs="Configuration options related to trace facility">
      <option type='bool' id='RKH_TRC_EN'  
         docs='If the #RKH_TRC_EN is set to 1 then RKH will include the trace facility.'
         defval='0' />
      <option type='int' id='RKH_TRC_MAX_EVENTS'  
         docs='Specify the maximum number of trace events, this number is direclty 
         related with the #RKH_TRC_EVENTS enumeration. The smaller this number, 
         the lower the RAM consumption.
         See \c #trceftbl table.' 
         depends='RKH_TRC_EN'
         minval="1" maxval="100" defval='8' />
      <option type='bool' id='RKH_TRC_RUNTIME_FILTER'  
         docs='If the #RKH_TRC_RUNTIME_FILTER is set to 1 then RKH will include the 
         runtime trace filter facility.
         When #RKH_TRC_RUNTIME_FILTER is enabled RKH also will automatically 
         define RKH_FILTER_ON_GROUP(), RKH_FILTER_OFF_GROUP(), 
         RKH_FILTER_ON_EVENT(), RKH_FILTER_OFF_EVENT(), 
         RKH_FILTER_ON_GROUP_EVENT(), and RKH_FILTER_OFF_GROUP_EVENT() macros.' 
         defval='1' />
      <option type='bool' id='RKH_TRC_ALL'  
         docs='If the #RKH_TRC_ALL is set to 1 then RKH will include all its own trace 
         records.' 
         defval='1' />
      <option type='bool' id='RKH_TRC_EN_MP'  
         docs='If the #RKH_TRC_EN_MP is set to 1 then RKH will include all trace records 
         related to the native fixed-size memory blocks.' 
         defval='0' />
      <option type='bool' id='RKH_TRC_EN_RQ'  
         docs='If the #RKH_TRC_EN_RQ is set to 1 then RKH will include all trace records 
         related to the native queues.' 
         defval='0' />
      <option type='bool' id='RKH_TRC_EN_SMA'  
         docs='If the #RKH_TRC_EN_SMA is set to 1 then RKH will include all trace records 
         related to the state machine applications.'
         defval='0' />
      <option type='bool' id='RKH_TRC_EN_TIM'  
         docs='If the #RKH_TRC_EN_TIM is set to 1 then RKH will include all trace records 
         related to the native software timer.' 
         defval='0' />
      <option type='bool' id='RKH_TRC_EN_SM'  
         docs='If the #RKH_TRC_EN_SM is set to 1 then RKH will include all trace records 
         related to the state machine (hierarchical and "flat")' 
         defval='0' />
      <option type='bool' id='RKH_TRC_EN_RKH'  
         docs='If the #RKH_TRC_EN_RKH is set to 1 then RKH will include all trace records 
         related to the nativenative  event framework.' 
         defval='0' />
      <option type='bool' id='RKH_TRC_EN_SM_INIT'  
         docs='If the #RKH_TRC_EN_SM_INIT and #RKH_TRC_EN_SM are set to 1 then RKH will 
         include the "init state machine" trace record.' 
         defval='1' />
      <option type='bool' id='RKH_TRC_EN_SM_DCH'  
         docs='If the #RKH_TRC_EN_SM_DCH and #RKH_TRC_EN_SM are set to 1 then RKH will 
         include the "start a state machine" trace record' 
         defval='1' />
      <option type='bool' id='RKH_TRC_EN_SM_CLRH'  
         docs='If the #RKH_TRC_EN_SM_CLRH and #RKH_TRC_EN_SM are set to 1 then RKH will 
         include the "dispatch an event to state machine" trace record.' 
         defval='1' />
      <option type='bool' id='RKH_TRC_EN_SM_TRN'  
         docs='If the #RKH_TRC_EN_SM_CLRH and #RKH_TRC_EN_SM are set to 1 then RKH will 
         include the "clear the history pseudostate" trace record.' 
         defval='1' />
      <option type='bool' id='RKH_TRC_EN_SM_STATE'  
         docs='If the #RKH_TRC_EN_SM_STATE and #RKH_TRC_EN_SM are set to 1 then RKH will 
         include the "final state of transition" trace record.' 
         defval='1' />
      <option type='bool' id='RKH_TRC_EN_SM_ENSTATE'  
         docs='If the #RKH_TRC_EN_SM_CLRH and #RKH_TRC_EN_SM are set to 1 then RKH will 
         include the "entry state" trace record.' 
         defval='1' />
      <option type='bool' id='RKH_TRC_EN_SM_NENEX'  
         docs='If the #RKH_TRC_EN_SM_CLRH and #RKH_TRC_EN_SM are set to 1 then RKH will 
         include the "number of entry and exit states in transition" trace record.' 
         defval='1' />
      <option type='bool' id='RKH_TRC_EN_SM_NTRNACT'  
         docs='If the #RKH_TRC_EN_SM_CLRH and #RKH_TRC_EN_SM are set to 1 then RKH will 
         include the "number of executed actions in transition" trace record.'
         defval='1' />
      <option type='bool' id='RKH_TRC_EN_SM_CSTATE'  
         docs='If the #RKH_TRC_EN_SM_CLRH and #RKH_TRC_EN_SM are set to 1 then RKH will 
         include the "state or pseudostate in a compound transition" trace record.' 
         defval='1' />
      <option type='bool' id='RKH_TRC_EN_SM_DCH_RC'  
         docs='If the #RKH_TRC_EN_SM_CLRH and #RKH_TRC_EN_SM are set to 1 then RKH will 
         include the "returned code from dispatch function" trace record.' 
         defval='1' />
      <option type='bool' id='RKH_TRC_EN_NSEQ'  
         docs='If the #RKH_TRC_EN_NSEQ is set to 1 then RKH will add to the trace record an 
         incremental number (1-byte), used like a sequence number.
         See RKH_TRC_NSEQ() and RKH_TRC_HDR() macros.' 
         defval='1' />
      <option type='bool' id='RKH_TRC_EN_CHK'  
         docs='If the #RKH_TRC_EN_CHK is set to 1 then RKH will add to the trace record a 
         checksum (1-byte). See RKH_TRC_CHK() macro.' 
         defval='1' />
      <option type='bool' id='RKH_TRC_EN_TSTAMP'  
         docs='If the #RKH_TRC_EN_TSTAMP is set to 1 then RKH will add to the trace record 
         a timestamp field. Its configurable by means of #RKH_TRC_SIZEOF_TSTAMP.' 
         defval='1' />
      <option type='enum' id='RKH_TRC_SIZEOF_TSTAMP'  
         docs='Specify the number of bytes (size) used by the trace record timestamp. 
         The valid values [in bits] are 8, 16 or 32. Default is 16.' 
         defval='16' >
         <value name="8"/>
         <value name="16"/>
         <value name ="32"/>
      </option>
      <option type='int' id='RKH_TRC_SIZEOF_STREAM'  
         docs='Specify the maximum number of trace events in the stream. The smaller 
         this number, the lower the RAM consumption.' 
         minval="1" maxval="2048" defval='256' />
      <option type='enum' id='RKH_TRC_SIZEOF_POINTER'  
         docs='Specify the size of void pointer. The valid values [in bits] are 
         16 or 32. Default is 16. See RKH_TRC_SYM() macro.' 
         defval='16' >
         <value name="8"/>
         <value name="16"/>
         <value name ="32"/>
      </option>
   </group>
   <group name="Queue" 
      docs="Configuration options related to queue (by reference) facility">
      <option type='bool' id='RKH_RQ_EN'  
         docs='If the #RKH_RQ_EN is set to 1 then RKH will include the native queue facility.' 
         defval='1' />
      <option type='enum' id='RKH_RQ_SIZEOF_NELEM'  
         docs='Specify the maximum number of elements that any queue can contain. 
         The valid values [in bits] are 8, 16 or 32. Default is 8. 
         See #RKH_RQNE_T type.' 
         defval='8' >
         <value name="8"/>
         <value name="16"/>
         <value name ="32"/>
      </option>
      <option type='bool' id='RKH_RQ_EN_GET_LWMARK'  
         docs='If the #RKH_RQ_EN_GET_LWMARK is set to 1 then RKH allows to known the 
         minimum number of free elements ever in the queue (low-watermark ). 
         This provides valuable empirical data for proper sizing of the queue.
         See rkh_rq_get_lwm() function.' 
         defval='1' />
      <option type='bool' id='RKH_RQ_EN_GET_INFO'  
         docs='If the #RKH_RQ_EN_GET_INFO is set to 1 then RKH allows to collect and 
         retrives performance information for a particular queue.
         See rkh_rq_get_info() and rkh_rq_clear_info() functions.' 
         defval='0' />
      <option type='bool' id='RKH_RQ_EN_READ'  
         docs='If the #RKH_RQ_EN_READ is set to 1 then RKH will include the rkh_rq_read() 
         function that allows read an element from a queue without remove it.
         See rkh_rq_read() function.' 
         defval='1' />
      <option type='bool' id='RKH_RQ_EN_DEPLETE'  
         docs='If the #RKH_RQ_EN_DEPLETE is set to 1 then RKH will include the 
         rkh_rq_deplete() function that empties the contents of the queue and 
         eliminates all stored elements.
         See rkh_rq_deplete() function.' 
         defval='1' />
      <option type='bool' id='RKH_RQ_EN_IS_FULL'  
         docs='If the #RKH_RQ_EN_IS_FULL is set to 1 then RKH will include the 
         rkh_rq_is_full() function that allows to known if a queue is full.
         See rkh_rq_is_full() function.' 
         defval='1' />
      <option type='bool' id='RKH_RQ_EN_GET_NELEMS'  
         docs='If the #RKH_RQ_EN_GET_NELEMS is set to 1 then RKH will include the 
         rkh_rq_get_num() function that returns the number of elements currently 
         in the queue.
         See rkh_rq_get_num() function.' 
         defval='1' />
      <option type='bool' id='RKH_RQ_EN_PUT_LIFO'  
         docs='If the #RKH_RQ_EN_PUT_LIFO is set to 1 then RKH will include the 
         rkh_rq_put_lifo() function that puts an element on a queue in a LIFO 
         manner.
         See rkh_rq_put_lifo() function.' 
         defval='1' />
   </group>
   <group name="Memory" 
      docs="Configuration options related to fixed-sized memory block facility">
      <option type='bool' id='RKH_MP_EN'  
         docs='If the #RKH_MP_EN is set to 1 then RKH will include the native 
         fixed-size memory block management.' defval='1' />
      <option type='bool' id='RKH_MP_REDUCED'  
         docs='' defval='0' />
      <option type='enum' id='RKH_MP_SIZEOF_BSIZE'  
         docs='Specify size of number of memory block size. The valid values [in bits] are 8, 16 or 32.
         Default is 8. See #RKH_MPNB_T type.'
         defval='8' >
         <value name="8"/>
         <value name="16"/>
         <value name ="32"/>
      </option>
      <option type='enum' id='RKH_MP_SIZEOF_NBLOCK'  
         docs='Specify the size of memory block size. The valid values [in bits] are 
         8, 16 or 32. Default is 8. See #RKH_MPBS_T type.' 
         defval='8' >
         <value name="8"/>
         <value name="16"/>
         <value name ="32"/>
      </option>
      <option type='bool' id='RKH_MP_EN_GET_BSIZE'  
         docs='If the #RKH_MP_EN_GET_BSIZE is set to 1 then RKH will include the 
         rkh_mp_get_blksize() function that returns the size of memory block in 
         bytes. See rkh_mp_get_blksize() function.' 
         defval='1' />
      <option type='bool' id='RKH_MP_EN_GET_NFREE'  
         docs='If the #RKH_MP_EN_GET_NFREE is set to 1 then RKH will include the 
         rkh_mp_get_nfree() function that returns the current number of free 
         memory blocks in the pool.
         See rkh_mp_get_nfree() function.' 
         defval='1' />
      <option type='bool' id='RKH_MP_EN_GET_LWM'  
         docs='If the #RKH_MP_EN_GET_LWM is set to 1 then RKH will include the 
         rkh_mp_get_low_wmark() function that returns the lowest number of free 
         blocks ever present in the pool. This number provides valuable empirical 
         data for proper sizing of the memory pool.
         See rkh_mp_get_low_wmark() function.' 
         defval='1' />
      <option type='bool' id='RKH_MP_EN_GET_INFO'  
         docs='If the #RKH_MP_EN_GET_INFO is set to 1 then RKH will include the 
         rkh_mp_get_info() function that retrieves performance information for 
         a particular memory pool. See rkh_mp_get_info() function.' 
         defval='0' />
   </group>
   <group name="Times" 
      docs="Configuration options related to software timer facility">
      <option type='bool' id='RKH_TIM_EN'  
         docs='If the #RKH_RQ_EN is set to 1 then RKH will include the native software 
         timer facility.' 
         defval='1' />
      <option type='enum' id='RKH_TIM_SIZEOF_NTIMER'  
         docs='Specify the dynamic range of the time delays measured in clock ticks 
         (maximum number of ticks). The valid values [in bits] are 8, 16 or 32. 
         Default is 8.' 
         defval='16' >
         <value name="8"/>
         <value name="16"/>
         <value name ="32"/>
      </option>
      <option type='bool' id='RKH_TIM_EN_HOOK'  
         docs='If the #RKH_TIM_EN_HOOK is set to 1 then RKH will invoke a hook function 
         when a timer expires. When this is set the application must provide the 
         hook function.' defval='1' />
      <option type='bool' id='RKH_TIM_EN_RESTART'  
         docs='If the #RKH_MP_EN_GET_LWM is set to 1 then RKH will include the 
         rkh_mp_get_low_wmark() function that returns the lowest number of free 
         blocks ever present in the pool. This number provides valuable empirical 
         data for proper sizing of the memory pool.
         See rkh_mp_get_low_wmark() function.' 
         defval='1' />
      <option type='bool' id='RKH_TIM_EN_GET_INFO'  
         docs='If the #RKH_MP_EN_GET_INFO is set to 1 then RKH will include the 
         rkh_mp_get_info() function that retrieves performance information for 
         a particular memory pool. See rkh_mp_get_info() function.' 
         defval='1' />
   </group>
</headerconfig>
